/*
   ||||||||||||||||||||||||||||
   ||         RSSGen         ||
   ||    MeteorJS Library    ||
   ||||||||||||||||||||||||||||
   ||        handmade        ||
   ||           by           ||
   ||     pedromendonka      ||
   ||          2016          ||
   ||||||||||||||||||||||||||||
*/

/* Version 1.0.0 */

(function () {
    var fs = Npm.require('fs');
    var path = Npm.require('path');
    var rootPath = path.resolve('../../../../../');
    var rssConf = {};
    var rssData;
    // RSS structure using XML 1.0, UTF-8, RSS version 2.0 //
    var rss = {

        xml: '<?xml version="1.0" encoding="UTF-8" ?>' + '\r\r',
        open: '<rss version="2.0">' + '\r\r',
        close:  "</rss>" + '\r',

        channel: {
            open: '\t' + '<channel>' + '\r\r',
            close: '\t' + '</channel>' + '\r\r',

            title: {
                open: '\t\t' + '<title>',
                close: '</title>' + '\r\r'
            },
            link: {
                open: '\t\t' + '<link>',
                close: '</link>' + '\r'
            },
            description: {
                open: "\t\t" + '<description>',
                close: '</description>' + '\r\r'
            }
        },

        item: {
            open: '\t\t\t' + '<item>' + '\r',
            close: '\t\t\t' + '</item>' + '\r\r',

            title: {
                open: '\t\t\t\t' + '<title>',
                close: '</title>' + '\r'
            },
            link: {
                open: '\t\t\t\t' + '<link>',
                close: '</link>' + '\r'
            },
            description: {
                open: '\t\t\t\t' + '<description>',
                close: '</description>' + '\r'
            }
        }

    };
    // Default RSS channel config
    var defaultConf = {
        title: 'RSSGen posts',
        link: 'https://atmospherejs.com/pedromendonka/rssgen',
        description: 'RSS simple generator',
        source: [{title: "Topic Title", body: "RSSGen is a simple RSS generator from a mongo collection "}],
        outputDir: '/',
        outputFile: 'rssOutput.xml'
    };

    /////////////////////
    // Exposed RSSGen //
    ///////////////////
    var RSSGen = function(confObj){
        return new RSSGen.init(confObj);
    }

    // Main RSSGen function init //
    RSSGen.init = function(confObj) {
        var self = this;
        self.rssConf = confObj || defaultConf;
    }

    // RSSGen PROTOTYPE with all properties and methods //
    RSSGen.prototype = {
        // Set RSSGen config after created
        setConf: function(confObj) {
            this.rssConf.title = confObj.title || this.defaultConf.title;
            this.rssConf.link = confObj.link || this.defaultConf.link;
            this.rssConf.description = confObj.description || this.defaultConf.description;
            this.rssConf.source = confObj.source || this.defaultConf.source;
            this.rssConf.outputDir = confObj.outputDir || this.defaultConf.outputDir;
            this.rssConf.outputFile = confObj.outputFile || this.defaultConf.outputFile;

            // Make this method chainable
            return this;
        },
        // Set data source independently from the other options
        setSource: function(dataSource) {
            if (dataSource){
                this.rssConf.source = dataSource;
            } else {
                throw 'RSSGen: Bad datasource or param missing';
            }

            // Make this method chainable
            return this;
        },
        generate: function() {
            // Generate rssData
            var rssData = this.generateRssData();
            // Write final rssoutput.xml to the server with rss data
            fs.writeFile(rootPath + this.rssConf.outputDir + this.rssConf.outputFile, rssData, function (error) {
                if (error) {
                    throw error;
                } else {
                    console.log('RSS generated!');
                }
            });
        },
        generateRssData: function() {
            var rssData = rss.xml;
            rssData += rss.open;
            rssData += rss.channel.open;
            rssData += rss.channel.title.open + this.rssConf.title + rss.channel.title.close;
            rssData += rss.channel.link.open + this.rssConf.link + rss.channel.link.close;
            rssData += rss.channel.description.open + this.rssConf.description + rss.channel.description.close;
            // items generated by source
            for (var i in this.rssConf.source){
                rssData += rss.item.open;
                rssData += rss.item.title.open + this.rssConf.source[i].title + rss.item.title.close;
                rssData += rss.item.link.open + this.rssConf.link + rss.item.link.close;
                rssData += rss.item.description.open + this.rssConf.source[i].body + rss.item.description.close;
                rssData += rss.item.close;
            }
            rssData += rss.channel.close;
            rssData += rss.close;

            return rssData;
        }
    };

    // Exposing prototype
    RSSGen.init.prototype = RSSGen.prototype;
    // Exposing RSSGen
    this.RSSGen = RSSGen;

}());
